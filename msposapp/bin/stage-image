#!/bin/bash

[ ! -f ../.envtype ] && echo "Not installed. Run the installer from the main menu." && exit 0
[ "`docker image ls -q`" == "" ] && echo "No image available. Build image first." && exit 0

OS=centos
echo -n "daisy or rti?: "
read POSTYPE
[ "$POSTYPE" == "daisy" ] && VER="10.1.22" && POSDIR="d"
[ "$POSTYPE" == "rti" ] && VER="16.1.3" && POSDIR="usr2"
[ "$POSTYPE" == "doveplus" ] && VER="18.1.1" && POSDIR="c"
POSIP=`cat .posip`
SHOPCODE=`cat .shopcode`

#add POS users
useradd -b /home tfpos-$SHOPCODE

#start container
[ "$POSTYPE" != "doveplus" ] && CONTAINER=`docker run -d -it --name=$SHOPCODE.teleflora.com --rm --privileged -v "/home/tfpos-${SHOPCODE}/${POSDIR}:/${POSDIR}" -v /sys/fs/cgroup:/sys/fs/cgroup:ro -w="/${POSDIR}" -i ${OS}7-${POSTYPE}-${VER} /usr/sbin/init`

[ "$POSTYPE" == "doveplus" ] && [ ! -d /home/tfpos-$SHOPCODE/$POSDIR ] && mkdir /home/tfpos-$SHOPCODE/$POSDIR && CONTAINER=`docker run --privileged -d -it --name $SHOPCODE.teleflora.com --device=/dev/kvm --device=/dev/net/tun -v "/home/tfpos-${SHOPCODE}/${POSDIR}:/${POSDIR}" -v /sys/fs/cgroup:/sys/fs/cgroup:rw --cap-add=NET_ADMIN --cap-add=SYS_ADMIN -w="/${POSDIR}" -i ${OS}7-${POSTYPE}-${VER} bash`

echo $CONTAINER>.container

#configure the second nic for host networking by passing eth1 through to the container
./pipework --direct-phys eth1 $CONTAINER ${POSIP}/24@192.168.1.254
POSIP=`docker exec $CONTAINER /usr/sbin/ifconfig eth1 | grep broad | sed -e 's/    //g' | cut -d ' ' -f2`
echo "$POSIP" > .posip

#copy over media
[ "$POSTYPE" == "daisy" ] && cp ../files/daisy*.iso /home/tfpos-$SHOPCODE/$POSDIR/. && cp ../files/ostools*.gz /home/tfpos-$SHOPCODE/$POSDIR/. && cp ../files/register_insights /home/tfpos-$SHOPCODE/$POSDIR/.
[ "$POSTYPE" == "rti" ] && cp ../files/ostools*.gz /home/tfpos-$SHOPCODE/$POSDIR/. && cp ../files/register_insights /home/tfpos-$SHOPCODE/$POSDIR/.

#changed from /bin to /usr/bin at some point. Created link to avoid problems with other scripts and programs.
docker exec $CONTAINER ln -s /usr/bin /bin

#lang set
docker exec $CONTAINER echo LANG=en_US.UTF-8 >/etc/locale.conf

#Make loop back device in container so we can mount isos inside the container
docker exec $CONTAINER mknod /dev/loop b 7 0

#install ostools
[ "${POSTYPE}" != "doveplus" ] && docker exec $CONTAINER tar xvfz ostools-1.15-latest.tar.gz && docker exec $CONTAINER ./bin/install-ostools.pl ./ostools-1.15-latest.tar.gz --noharden-linux

#configure system hostname
[ "${POSTYPE}" != "doveplus" ] && docker exec $CONTAINER ./bin/updateos.pl --hostname=$SHOPCODE.teleflora.com >/dev/null 2>&1

#prepare for daisy
[ "$POSTYPE" == daisy ] && docker exec $CONTAINER ./bin/updateos.pl --daisy8

#install daisy
[ "$POSTYPE" == "daisy" ] && docker exec $CONTAINER mkdir /mnt/cdrom
[ "$POSTYPE" == "daisy" ] && docker exec $CONTAINER mount -o loop daisy_"${VER}"_rhel7.iso /mnt/cdrom
[ "$POSTYPE" == "daisy" ] && docker exec $CONTAINER cp /mnt/cdrom/install-daisy.pl .
[ "$POSTYPE" == "daisy" ] && docker exec $CONTAINER ./install-daisy.pl /d/daisy
[ "$POSTYPE" == "daisy" ] && docker exec $CONTAINER umount /mnt/cdrom

#register with insights.
#docker exec $CONTAINER ./register_insights

#restore backup data if exist.
[ "`ls /backups | grep $SHOPCODE`" != "" ] && ./restore_data $POSDIR

#move off hosts.deny
#this is just for devel convienence. for security reasons, this should be removed after live use, disallowing ssh access even from the docker/outer host.
[ "$POSTYPE" != "doveplus" ] && docker exec $CONTAINER mv /etc/hosts.deny /etc/hosts.deny.orig

#install vpn software
docker exec $CONTAINER yum -y install epel-release
docker exec $CONTAINER yum -y install strongswan libreswan xl2tpd strongswan-libipsec NetworkManager NetworkManager-strongswan NetworkManager-l2tp NetworkManager-libreswan

#install receipt printer drivers
#docker cp ./istar.ppd ${CONTAINER}:/etc/cups/ppd
#docker cp ./istar.rpm ${CONTAINER}:/tmp
#docker exec $CONTAINER rpm -i /tmp/istar.rpm

#create vpn if desired
echo -n "Create VPN? (y/n): "
read VPN
[ "$VPN" == "y" ] && ./create_vpn && docker exec ${CONTAINER} systemctl start NetworkManager && docker exec ${CONTAINER} systemctl start strongswan && docker exec ${CONTAINER} systemctl start xl2tpd && docker exec ${CONTAINER} strongswan start

#Done
echo "---"
echo "${OS}7-$POSTYPE-$SHOPCODE instance is ready!"
echo "---"
exit 0
